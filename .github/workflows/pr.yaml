name: Secure Build & Deploy to AWS ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Run only on PRs raise

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npm run lint
        continue-on-error: true

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          format: "HTML"
          out: "owasp-report.html"
          project: "nodejs-app"
          args: "--failOnCVSS 11"  # Ensures the build does not fail due to vulnerabilities

      - name: Trivy Scan (Security Vulnerabilities)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          exit-code: 0  # Prevents failure
          ignore-unfixed: true
          format: table
          output: trivy-results.txt

      - name: Install SonarQube Scanner
        run: |
          curl -L -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} \
            -Dsonar.projectKey=my-nodejs-app
        continue-on-error: true # Prevents build failure

      - name: Upload Security Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            owasp-report.html
            trivy-results.txt

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: security_scan
    if: github.event_name == 'push'  # Run only on push to main
    env:
      AWS_REGION: "ap-south-1"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }} 

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker Image to ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push'  # Run only on push to main
    env:
      AWS_REGION: "ap-south-1"

    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs update-service --cluster test-node-app --service test-node-app --force-new-deployment
