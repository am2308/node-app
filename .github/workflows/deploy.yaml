name: Secure Build & Deploy to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          format: "HTML"
          out: "owasp-report.html"
          fail-on-severity: "none"  # Prevents build failure

      - name: Trivy Scan (Security Vulnerabilities)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          exit-code: 0  # Prevents failure
          ignore-unfixed: true
          format: table
          output: trivy-results.txt

      #- name: SonarQube Analysis
      #  run: |
      #    sonar-scanner \
      #      -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
      #      -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} \
      #      -Dsonar.projectKey=my-nodejs-app
      #  continue-on-error: true # Prevents build failure

      - name: Upload Security Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            owasp-report.html
            trivy-results.txt

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: security_scan
    env:
      AWS_REGION: "ap-south-1"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }} 

      #- name: Login to AWS ECR
      #  run: |
      #    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
      #    docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      #- name: Push Docker Image to ECR
      #  run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

  #deploy:
  #  name: Deploy to AWS ECS
  #  runs-on: ubuntu-latest
  #  needs: build_and_push

  #  steps:
  #    - name: Configure AWS Credentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #        aws-region: us-east-1

  #    - name: Update ECS Task Definition
  #      run: |
  #        aws ecs update-service --cluster my-ecs-cluster --service my-ecs-service --force-new-deployment
